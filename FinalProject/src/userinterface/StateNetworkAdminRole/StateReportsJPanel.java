/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StateNetworkAdminRole;

import Business.RegCenter.Donor;
import Business.RegCenter.DonorDirectory;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author ApoorvaLakhmani
 */
public class StateReportsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DonorDirectory donorDirectory;

    /**
     * Creates new form StateReportsJPanel
     */
    StateReportsJPanel(JPanel userProcessContainer, DonorDirectory donorDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.donorDirectory = donorDirectory;
        final CategoryDataset dataset = createDataSet();
        final JFreeChart chart = createChart(dataset);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartJPanel.setLayout(new BorderLayout());
        //chartJPanel.setPreferredSize(new Dimension(400, 400));
        chartJPanel.add(chartPanel, BorderLayout.CENTER);
        chartJPanel.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        chartJPanel = new javax.swing.JPanel();

        jButton1.setText("report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chartJPanelLayout = new javax.swing.GroupLayout(chartJPanel);
        chartJPanel.setLayout(chartJPanelLayout);
        chartJPanelLayout.setHorizontalGroup(
            chartJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 404, Short.MAX_VALUE)
        );
        chartJPanelLayout.setVerticalGroup(
            chartJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(448, 448, 448)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(chartJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(298, 298, 298))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jButton1)
                .addGap(87, 87, 87)
                .addComponent(chartJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // generateReport();
    }//GEN-LAST:event_jButton1ActionPerformed
    private CategoryDataset createDataSet() {
        
        ArrayList<String> cityList = new ArrayList<>();

        DefaultCategoryDataset barChartData = new DefaultCategoryDataset();
//        barChartData.addValue(20000, "Contribution Amount", "January");
//        barChartData.addValue(15000, "Contribution Amount", "February");
//        barChartData.addValue(10000, "Contribution Amount", "March");

        for (Donor donor : donorDirectory.getDonorList()) {
            if (!cityList.contains(donor.getDonorAddress()) && !cityList.contains(donor.getDonorAddress()+" ")) {
                
                cityList.add(donor.getDonorAddress());
            }
        }

        for (String city : cityList) {
            Map<Integer, Integer> yearDonorMap = new HashMap<>();
            for (Donor donor : donorDirectory.getDonorList()) {
                if (donor.getDonorAddress().trim().equalsIgnoreCase(city.trim())) {
                    int counter = 1;
                    Date regDate = donor.getDonorRegisterationDate();
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(regDate);

                    int year = cal.get(Calendar.YEAR);
                    if (yearDonorMap.containsKey(year)) {
                        counter = yearDonorMap.get(year);
                        counter++;
                        yearDonorMap.put(year, counter);
                    } else {
                        yearDonorMap.put(year, counter);
                    }
                }
            }
            for (Map.Entry<Integer, Integer> entryset : yearDonorMap.entrySet()) {
                barChartData.addValue(entryset.getValue(), city, entryset.getKey());
            }
        }

        return barChartData;

    }

    private JFreeChart createChart(CategoryDataset dataset) {
        JFreeChart barChart = ChartFactory.createBarChart("No Of Registered Donors", "Year", "Registered Donors", dataset, PlotOrientation.VERTICAL, false, true, false);
        return barChart;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartJPanel;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
